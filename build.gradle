////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build dependencies
buildscript {
    // Extra properties (valid for all projects if defined here)
    ext {
        junitJupiterVersion = "5.6.0"
    }

    // Repositories for build scripts
    repositories {
        // Maven
        mavenCentral()

        // Sonatype repositories
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Plugins and defaults
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group "it.burning"
version '1.2.11'

idea {
    module {
        // Override output directories
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources"
        }
    }
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Repositories
repositories {
    // Maven
    mavenCentral()

    // Sonatype repositories
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Dependencies
dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter:$junitJupiterVersion")
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Compiler flags
gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        // Warn about deprecations
        options.compilerArgs << "-Xlint:deprecation"

        // Warn about unchecked casts
        options.compilerArgs << "-Xlint:unchecked"
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Unit testing
test {
    useJUnitPlatform()
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Publishing

publishing {
    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            artifactId = 'cron-expression-descriptor'
            from components.java

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = 'Cron Expression Descriptor'
                description = 'A Java library that converts cron expressions into human readable descriptions'
                url = 'https://github.com/voidburn/cron-expression-descriptor'

                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/voidburn/cron-expression-descriptor/blob/master/LICENSE'
                    }
                }

                developers {
                    developer {
                        id = 'voidburn'
                        name = 'Luca Vignaroli'
                        email = 'luca@burning.it'
                    }
                }

                scm {
                    connection = 'scm:git:https://github.com/voidburn/cron-expression-descriptor.git'
                    developerConnection = 'scm:git:https://github.com/voidburn/cron-expression-descriptor.git'
                    url = 'https://github.com/voidburn/cron-expression-descriptor'
                }
            }
        }
    }
}

signing {
    def signingKey = System.getenv("BURNING_GPG_KEY")
    def signingPassword = System.getenv("BURNING_GPG_PASSPHRASE")
    useInMemoryPgpKeys(signingKey, signingPassword)

    sign publishing.publications.mavenJava
}
